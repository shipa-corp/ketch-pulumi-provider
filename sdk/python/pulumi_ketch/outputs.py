# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AppApp',
    'AppAppProcess',
    'AppAppRoutingSettings',
    'FrameworkFramework',
    'FrameworkFrameworkIngressController',
    'JobJob',
    'JobJobContainer',
    'JobJobPolicy',
]

@pulumi.output_type
class AppApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routingSettings":
            suggest = "routing_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 framework: str,
                 image: str,
                 name: str,
                 cnames: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence[int]] = None,
                 processes: Optional[Sequence['outputs.AppAppProcess']] = None,
                 routing_settings: Optional['outputs.AppAppRoutingSettings'] = None,
                 units: Optional[int] = None,
                 version: Optional[int] = None):
        pulumi.set(__self__, "framework", framework)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if cnames is not None:
            pulumi.set(__self__, "cnames", cnames)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if routing_settings is not None:
            pulumi.set(__self__, "routing_settings", routing_settings)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def framework(self) -> str:
        return pulumi.get(self, "framework")

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def cnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cnames")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def processes(self) -> Optional[Sequence['outputs.AppAppProcess']]:
        return pulumi.get(self, "processes")

    @property
    @pulumi.getter(name="routingSettings")
    def routing_settings(self) -> Optional['outputs.AppAppRoutingSettings']:
        return pulumi.get(self, "routing_settings")

    @property
    @pulumi.getter
    def units(self) -> Optional[int]:
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class AppAppProcess(dict):
    def __init__(__self__, *,
                 cmds: Optional[Sequence[str]] = None,
                 name: Optional[str] = None):
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AppAppRoutingSettings(dict):
    def __init__(__self__, *,
                 weight: Optional[int] = None):
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FrameworkFramework(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressController":
            suggest = "ingress_controller"
        elif key == "appQuotaLimit":
            suggest = "app_quota_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FrameworkFramework. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FrameworkFramework.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FrameworkFramework.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_controller: 'outputs.FrameworkFrameworkIngressController',
                 name: str,
                 app_quota_limit: Optional[int] = None,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "ingress_controller", ingress_controller)
        pulumi.set(__self__, "name", name)
        if app_quota_limit is not None:
            pulumi.set(__self__, "app_quota_limit", app_quota_limit)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="ingressController")
    def ingress_controller(self) -> 'outputs.FrameworkFrameworkIngressController':
        return pulumi.get(self, "ingress_controller")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="appQuotaLimit")
    def app_quota_limit(self) -> Optional[int]:
        return pulumi.get(self, "app_quota_limit")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class FrameworkFrameworkIngressController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "className":
            suggest = "class_name"
        elif key == "serviceEndpoint":
            suggest = "service_endpoint"
        elif key == "clusterIssuer":
            suggest = "cluster_issuer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FrameworkFrameworkIngressController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FrameworkFrameworkIngressController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FrameworkFrameworkIngressController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_name: str,
                 service_endpoint: str,
                 type: str,
                 cluster_issuer: Optional[str] = None):
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "service_endpoint", service_endpoint)
        pulumi.set(__self__, "type", type)
        if cluster_issuer is not None:
            pulumi.set(__self__, "cluster_issuer", cluster_issuer)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> str:
        return pulumi.get(self, "class_name")

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> str:
        return pulumi.get(self, "service_endpoint")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clusterIssuer")
    def cluster_issuer(self) -> Optional[str]:
        return pulumi.get(self, "cluster_issuer")


@pulumi.output_type
class JobJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backoffLimit":
            suggest = "backoff_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 framework: str,
                 name: str,
                 backoff_limit: Optional[int] = None,
                 completions: Optional[int] = None,
                 containers: Optional[Sequence['outputs.JobJobContainer']] = None,
                 description: Optional[str] = None,
                 parallelism: Optional[int] = None,
                 policy: Optional['outputs.JobJobPolicy'] = None,
                 suspend: Optional[bool] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "framework", framework)
        pulumi.set(__self__, "name", name)
        if backoff_limit is not None:
            pulumi.set(__self__, "backoff_limit", backoff_limit)
        if completions is not None:
            pulumi.set(__self__, "completions", completions)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if suspend is not None:
            pulumi.set(__self__, "suspend", suspend)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def framework(self) -> str:
        return pulumi.get(self, "framework")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="backoffLimit")
    def backoff_limit(self) -> Optional[int]:
        return pulumi.get(self, "backoff_limit")

    @property
    @pulumi.getter
    def completions(self) -> Optional[int]:
        return pulumi.get(self, "completions")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.JobJobContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[int]:
        return pulumi.get(self, "parallelism")

    @property
    @pulumi.getter
    def policy(self) -> Optional['outputs.JobJobPolicy']:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def suspend(self) -> Optional[bool]:
        return pulumi.get(self, "suspend")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class JobJobContainer(dict):
    def __init__(__self__, *,
                 commands: Sequence[str],
                 image: str,
                 name: str):
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class JobJobPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartPolicy":
            suggest = "restart_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 restart_policy: str):
        pulumi.set(__self__, "restart_policy", restart_policy)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> str:
        return pulumi.get(self, "restart_policy")


