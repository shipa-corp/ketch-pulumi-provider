# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AppAppArgs',
    'AppAppProcessArgs',
    'AppAppRoutingSettingsArgs',
    'FrameworkFrameworkArgs',
    'FrameworkFrameworkIngressControllerArgs',
    'JobJobArgs',
    'JobJobContainerArgs',
    'JobJobPolicyArgs',
]

@pulumi.input_type
class AppAppArgs:
    def __init__(__self__, *,
                 framework: pulumi.Input[str],
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 cnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 processes: Optional[pulumi.Input[Sequence[pulumi.Input['AppAppProcessArgs']]]] = None,
                 routing_settings: Optional[pulumi.Input['AppAppRoutingSettingsArgs']] = None,
                 units: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "framework", framework)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if cnames is not None:
            pulumi.set(__self__, "cnames", cnames)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if routing_settings is not None:
            pulumi.set(__self__, "routing_settings", routing_settings)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def framework(self) -> pulumi.Input[str]:
        return pulumi.get(self, "framework")

    @framework.setter
    def framework(self, value: pulumi.Input[str]):
        pulumi.set(self, "framework", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def cnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cnames")

    @cnames.setter
    def cnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cnames", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppAppProcessArgs']]]]:
        return pulumi.get(self, "processes")

    @processes.setter
    def processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppAppProcessArgs']]]]):
        pulumi.set(self, "processes", value)

    @property
    @pulumi.getter(name="routingSettings")
    def routing_settings(self) -> Optional[pulumi.Input['AppAppRoutingSettingsArgs']]:
        return pulumi.get(self, "routing_settings")

    @routing_settings.setter
    def routing_settings(self, value: Optional[pulumi.Input['AppAppRoutingSettingsArgs']]):
        pulumi.set(self, "routing_settings", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class AppAppProcessArgs:
    def __init__(__self__, *,
                 cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cmds")

    @cmds.setter
    def cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cmds", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AppAppRoutingSettingsArgs:
    def __init__(__self__, *,
                 weight: Optional[pulumi.Input[int]] = None):
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FrameworkFrameworkArgs:
    def __init__(__self__, *,
                 ingress_controller: pulumi.Input['FrameworkFrameworkIngressControllerArgs'],
                 name: pulumi.Input[str],
                 app_quota_limit: Optional[pulumi.Input[int]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ingress_controller", ingress_controller)
        pulumi.set(__self__, "name", name)
        if app_quota_limit is not None:
            pulumi.set(__self__, "app_quota_limit", app_quota_limit)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="ingressController")
    def ingress_controller(self) -> pulumi.Input['FrameworkFrameworkIngressControllerArgs']:
        return pulumi.get(self, "ingress_controller")

    @ingress_controller.setter
    def ingress_controller(self, value: pulumi.Input['FrameworkFrameworkIngressControllerArgs']):
        pulumi.set(self, "ingress_controller", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="appQuotaLimit")
    def app_quota_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "app_quota_limit")

    @app_quota_limit.setter
    def app_quota_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_quota_limit", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class FrameworkFrameworkIngressControllerArgs:
    def __init__(__self__, *,
                 class_name: pulumi.Input[str],
                 service_endpoint: pulumi.Input[str],
                 type: pulumi.Input[str],
                 cluster_issuer: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "service_endpoint", service_endpoint)
        pulumi.set(__self__, "type", type)
        if cluster_issuer is not None:
            pulumi.set(__self__, "cluster_issuer", cluster_issuer)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter(name="serviceEndpoint")
    def service_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_endpoint")

    @service_endpoint.setter
    def service_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_endpoint", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clusterIssuer")
    def cluster_issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_issuer")

    @cluster_issuer.setter
    def cluster_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_issuer", value)


@pulumi.input_type
class JobJobArgs:
    def __init__(__self__, *,
                 framework: pulumi.Input[str],
                 name: pulumi.Input[str],
                 backoff_limit: Optional[pulumi.Input[int]] = None,
                 completions: Optional[pulumi.Input[int]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['JobJobContainerArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 parallelism: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input['JobJobPolicyArgs']] = None,
                 suspend: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "framework", framework)
        pulumi.set(__self__, "name", name)
        if backoff_limit is not None:
            pulumi.set(__self__, "backoff_limit", backoff_limit)
        if completions is not None:
            pulumi.set(__self__, "completions", completions)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if suspend is not None:
            pulumi.set(__self__, "suspend", suspend)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def framework(self) -> pulumi.Input[str]:
        return pulumi.get(self, "framework")

    @framework.setter
    def framework(self, value: pulumi.Input[str]):
        pulumi.set(self, "framework", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="backoffLimit")
    def backoff_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backoff_limit")

    @backoff_limit.setter
    def backoff_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backoff_limit", value)

    @property
    @pulumi.getter
    def completions(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "completions")

    @completions.setter
    def completions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "completions", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobJobContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobJobContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelism", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['JobJobPolicyArgs']]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['JobJobPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def suspend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suspend")

    @suspend.setter
    def suspend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspend", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class JobJobContainerArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[str]]],
                 image: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class JobJobPolicyArgs:
    def __init__(__self__, *,
                 restart_policy: pulumi.Input[str]):
        pulumi.set(__self__, "restart_policy", restart_policy)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "restart_policy", value)


