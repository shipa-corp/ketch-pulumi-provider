// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ketch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Framework struct {
	pulumi.CustomResourceState

	Framework FrameworkFrameworkOutput `pulumi:"framework"`
}

// NewFramework registers a new resource with the given unique name, arguments, and options.
func NewFramework(ctx *pulumi.Context,
	name string, args *FrameworkArgs, opts ...pulumi.ResourceOption) (*Framework, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Framework == nil {
		return nil, errors.New("invalid value for required argument 'Framework'")
	}
	var resource Framework
	err := ctx.RegisterResource("ketch:index/framework:Framework", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFramework gets an existing Framework resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFramework(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkState, opts ...pulumi.ResourceOption) (*Framework, error) {
	var resource Framework
	err := ctx.ReadResource("ketch:index/framework:Framework", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Framework resources.
type frameworkState struct {
	Framework *FrameworkFramework `pulumi:"framework"`
}

type FrameworkState struct {
	Framework FrameworkFrameworkPtrInput
}

func (FrameworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkState)(nil)).Elem()
}

type frameworkArgs struct {
	Framework FrameworkFramework `pulumi:"framework"`
}

// The set of arguments for constructing a Framework resource.
type FrameworkArgs struct {
	Framework FrameworkFrameworkInput
}

func (FrameworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkArgs)(nil)).Elem()
}

type FrameworkInput interface {
	pulumi.Input

	ToFrameworkOutput() FrameworkOutput
	ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput
}

func (*Framework) ElementType() reflect.Type {
	return reflect.TypeOf((*Framework)(nil))
}

func (i *Framework) ToFrameworkOutput() FrameworkOutput {
	return i.ToFrameworkOutputWithContext(context.Background())
}

func (i *Framework) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkOutput)
}

func (i *Framework) ToFrameworkPtrOutput() FrameworkPtrOutput {
	return i.ToFrameworkPtrOutputWithContext(context.Background())
}

func (i *Framework) ToFrameworkPtrOutputWithContext(ctx context.Context) FrameworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkPtrOutput)
}

type FrameworkPtrInput interface {
	pulumi.Input

	ToFrameworkPtrOutput() FrameworkPtrOutput
	ToFrameworkPtrOutputWithContext(ctx context.Context) FrameworkPtrOutput
}

type frameworkPtrType FrameworkArgs

func (*frameworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Framework)(nil))
}

func (i *frameworkPtrType) ToFrameworkPtrOutput() FrameworkPtrOutput {
	return i.ToFrameworkPtrOutputWithContext(context.Background())
}

func (i *frameworkPtrType) ToFrameworkPtrOutputWithContext(ctx context.Context) FrameworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkPtrOutput)
}

// FrameworkArrayInput is an input type that accepts FrameworkArray and FrameworkArrayOutput values.
// You can construct a concrete instance of `FrameworkArrayInput` via:
//
//          FrameworkArray{ FrameworkArgs{...} }
type FrameworkArrayInput interface {
	pulumi.Input

	ToFrameworkArrayOutput() FrameworkArrayOutput
	ToFrameworkArrayOutputWithContext(context.Context) FrameworkArrayOutput
}

type FrameworkArray []FrameworkInput

func (FrameworkArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Framework)(nil))
}

func (i FrameworkArray) ToFrameworkArrayOutput() FrameworkArrayOutput {
	return i.ToFrameworkArrayOutputWithContext(context.Background())
}

func (i FrameworkArray) ToFrameworkArrayOutputWithContext(ctx context.Context) FrameworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkArrayOutput)
}

// FrameworkMapInput is an input type that accepts FrameworkMap and FrameworkMapOutput values.
// You can construct a concrete instance of `FrameworkMapInput` via:
//
//          FrameworkMap{ "key": FrameworkArgs{...} }
type FrameworkMapInput interface {
	pulumi.Input

	ToFrameworkMapOutput() FrameworkMapOutput
	ToFrameworkMapOutputWithContext(context.Context) FrameworkMapOutput
}

type FrameworkMap map[string]FrameworkInput

func (FrameworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Framework)(nil))
}

func (i FrameworkMap) ToFrameworkMapOutput() FrameworkMapOutput {
	return i.ToFrameworkMapOutputWithContext(context.Background())
}

func (i FrameworkMap) ToFrameworkMapOutputWithContext(ctx context.Context) FrameworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkMapOutput)
}

type FrameworkOutput struct {
	*pulumi.OutputState
}

func (FrameworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Framework)(nil))
}

func (o FrameworkOutput) ToFrameworkOutput() FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToFrameworkPtrOutput() FrameworkPtrOutput {
	return o.ToFrameworkPtrOutputWithContext(context.Background())
}

func (o FrameworkOutput) ToFrameworkPtrOutputWithContext(ctx context.Context) FrameworkPtrOutput {
	return o.ApplyT(func(v Framework) *Framework {
		return &v
	}).(FrameworkPtrOutput)
}

type FrameworkPtrOutput struct {
	*pulumi.OutputState
}

func (FrameworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Framework)(nil))
}

func (o FrameworkPtrOutput) ToFrameworkPtrOutput() FrameworkPtrOutput {
	return o
}

func (o FrameworkPtrOutput) ToFrameworkPtrOutputWithContext(ctx context.Context) FrameworkPtrOutput {
	return o
}

type FrameworkArrayOutput struct{ *pulumi.OutputState }

func (FrameworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Framework)(nil))
}

func (o FrameworkArrayOutput) ToFrameworkArrayOutput() FrameworkArrayOutput {
	return o
}

func (o FrameworkArrayOutput) ToFrameworkArrayOutputWithContext(ctx context.Context) FrameworkArrayOutput {
	return o
}

func (o FrameworkArrayOutput) Index(i pulumi.IntInput) FrameworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Framework {
		return vs[0].([]Framework)[vs[1].(int)]
	}).(FrameworkOutput)
}

type FrameworkMapOutput struct{ *pulumi.OutputState }

func (FrameworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Framework)(nil))
}

func (o FrameworkMapOutput) ToFrameworkMapOutput() FrameworkMapOutput {
	return o
}

func (o FrameworkMapOutput) ToFrameworkMapOutputWithContext(ctx context.Context) FrameworkMapOutput {
	return o
}

func (o FrameworkMapOutput) MapIndex(k pulumi.StringInput) FrameworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Framework {
		return vs[0].(map[string]Framework)[vs[1].(string)]
	}).(FrameworkOutput)
}

func init() {
	pulumi.RegisterOutputType(FrameworkOutput{})
	pulumi.RegisterOutputType(FrameworkPtrOutput{})
	pulumi.RegisterOutputType(FrameworkArrayOutput{})
	pulumi.RegisterOutputType(FrameworkMapOutput{})
}
